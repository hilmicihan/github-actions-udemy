name: Print Patterns

on:
  push:
    branches:
      - main

jobs:
  print-patterns:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Install necessary dependencies (in this case, Python)
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      # Step 3: Define the patterns
      # You can define the patterns in a separate file, or within the workflow itself
      - name: Define patterns
        run: |
          # Define a triangle pattern
          triangle = [
              "    *    ",
              "   ***   ",
              "  *****  ",
              " ******* ",
              "*********",
          ]

          # Define a square pattern
          square = [
              "*****",
              "*   *",
              "*   *",
              "*   *",
              "*****",
          ]

          # Define a diamond pattern
          diamond = [
              "    *    ",
              "   ***   ",
              "  *****  ",
              " ******* ",
              "*********",
              " ******* ",
              "  *****  ",
              "   ***   ",
              "    *    ",
          ]

      # Step 4: Choose your printing strategy and implement it for each pattern
      - name: Print patterns
        run: |
          # Print the triangle using nested loops
          n = 5
          for i in range(n):
              for j in range(i+1):
                  print("*", end="")
              print()

          # Print the square using a built-in function
          square = [
              "*****",
              "*   *",
              "*   *",
              "*   *",
              "*****",
          ]
          for line in square:
              print(line)

          # Print the diamond using recursion
          def print_diamond(n):
              if n < 1:
                  return
              print(" "*(n-1) + "*" + " "*(9-2*n) + "*")
              print_diamond(n-1)
              if n != 1:
                  print(" "*(n-1) + "*" + " "*(9-2*n) + "*")
          print_diamond(5)

      # Step 5: Document the code by adding comments and explanations
      - name: Add comments and explanations
        run: |
          # Add comments and explanations to the code
          # Explain how each printing strategy works and why it was chosen
          # Document any limitations or constraints of each strategy

      # Step 6: Refactor and optimize the code
      - name: Refactor and optimize
        run: |
          # Refactor the code to improve readability and maintainability
          # Optimize the code to improve performance if necessary
          # Consider using third-party libraries or tools to simplify the code

      # Step 7: Test the code to ensure it's working correctly
      - name: Test the code
        run: |
          # Test the code to ensure it's working correctly
          # Verify that each pattern is printed correctly
          # Check that the code runs without errors or warnings
